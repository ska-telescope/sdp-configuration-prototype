#
# Note: Tests can be run locally with
#   gitlab-runner exec <executor, eg. docker> <job name>
#

variables:
  GIT_STRATEGY: clone

stages:
  - build
  - test
  - post_test
  - linting
  - build_docker
  - publish
  - pages

# ============================================================================
# Local Include Gitlab-CI Files
# ============================================================================
include:
  - local: /scripts/.gitlab-ci-common.yml
  - local: /src/logging/.gitlab-ci.yml
  - local: /src/config_db/.gitlab-ci.yml
  - local: /src/tango_sdp_master/.gitlab-ci.yml
  - local: /src/tango_sdp_subarray/.gitlab-ci.yml
  - local: /src/console/.gitlab-ci.yml
  - local: /src/processing_controller/.gitlab-ci.yml
  - local: /src/helm_deploy/.gitlab-ci.yml
  - local: /src/vis_receive/.gitlab-ci.yml

# ============================================================================
# Build documentation
# ============================================================================

build_docs:
  stage: test
  image: nexus.engageska-portugal.pt/sdp-prototype/pytango_ska_dev:latest
  before_script:
    - pip install -r docs/requirements.txt
  script:
    - make -C docs html
  artifacts:
    paths: [docs/build/html/]
    expire_in: 1 day

# ============================================================================
# Generate test reports
# ============================================================================

## Generate combined test coverage report
coverage_report:
  stage: post_test
  tags: [docker]
  image: python:latest
#  variables:
#    TRAVIS_JOB_ID: $CI_PIPELINE_IID
  before_script:
    # The sub-projects run with this version so enforce it. There should be a better way of handling this.
    #- pip install -Iv coverage==4.5.4
    - pip install coverage
    - pip install coveralls
    - pip install pyyaml
    # This would install the latest coverage.
    #- pip install coverage
    #- pip install python-coveralls
  script:
    # Combine the coverage reports into a single report.
    - coverage --version
    - coverage combine *.coverage
    - coverage report
    - coverage html
    - coverage xml
    - mkdir -p build/reports
    - mv coverage.xml ./build/reports/code-coverage.xml
  coverage: '/TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+\%)/'
  after_script:
    # FIXME: this is not working but doesn't break the build.
    - coveralls --merge=coveralls.json
  artifacts:
    paths:
    - htmlcov
    - ./build
    expire_in: 1 week

linting:
  image: http://nexus.engageska-portugal.pt/ska-docker/ska-python-runtime:latest
  tags:
    - docker-executor
  stage: linting
  script:
    - cd src
    - pylint --output-format=pylint2junit.JunitReporter logging tango_sdp_master tango_sdp_subarray > ../build/reports/linting.xml
  when: always
  artifacts:
    paths:
      - ./build

# ============================================================================
# Publish reports
# ============================================================================

# Generate gitlab pages.
pages:
  stage: pages
  tags: [docker]
  image: python:latest
  dependencies: [coverage_report]
  script:
    # Publish the output of coverage_report
    - mv htmlcov public
  artifacts:
    paths: [public/]

create_ci_metrics:
  stage: .post
  image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:latest
  when: always
  tags: [docker]
  script:
    # I (Steve) would like to point the coverage badge to the coverage pages.
    # Gitlab CI badges creation: START
    - apt-get -y update
    - apt-get install -y curl --no-install-recommends
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    # Gitlab CI badges creation: END
  artifacts:
    paths:
      - ./build

## ============================================================================
## Publish documentation (master only)
## ============================================================================
