#
# Note: Tests can be run locally with
#   gitlab-runner exec <executor, eg. docker> <stage name>
#
image: docker:stable

services:
  - docker:dind

stages:
  - test
  - post_test
  - build_0
  - build_1
  - build_2
  - build_3
  - deploy

# Set up caching as suggested by GitLab's Python template
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
cache:
    paths: [.cache/pip]

# Test the SDPSubarray device
subarray_tests:
    stage: test
    image: skaorca/pytango_ska_dev:latest
    before_script:
      - pipenv install jsonschema
    script:
      - ./scripts/run_test.sh
          src/tango_sdp_subarray
          --gherkin-terminal-reporter
          -vv
          --cucumber-json=cucumber.json
      - mv .coverage $CI_JOB_NAME.coverage
    artifacts:
      paths:
      - cucumber.json
      - $CI_JOB_NAME.coverage
      expire_in: 1 week

# Test the SDPMaster device.
master_tests:
    stage: test
    image: skaorca/pytango_ska_dev:latest
    script:
      - ./scripts/run_test.sh src/tango_sdp_master
      - mv .coverage $CI_JOB_NAME.coverage
    artifacts:
      paths:
        - $CI_JOB_NAME.coverage

# Test the configuration database
config_db_tests:
    stage: test
    image: skaorca/pytango_ska_dev:latest
    services:
      - name: quay.io/coreos/etcd:latest
        alias: etcd
        command:
          - /usr/local/bin/etcd 
          - "--advertise-client-urls=http://0.0.0.0:2379"
          - "--listen-client-urls=http://0.0.0.0:2379"
          - "--initial-advertise-peer-urls=http://0.0.0.0:2380"
          - "--listen-peer-urls=http://0.0.0.0:2380"
          - "--initial-cluster=default=http://0.0.0.0:2380"
    variables:
      SDP_TEST_HOST: etcd
    script:
      - pipenv install etcd3-py
      - ./scripts/run_test.sh src/config_db
      - mv .coverage $CI_JOB_NAME.coverage
    artifacts:
      paths:
        - $CI_JOB_NAME.coverage

# Build documentation
build_docs:
  stage: test
  when: manual
  before_script:
    - pip install -r docs/requirements.txt
  script:
    - make -C docs html
  artifacts:
    paths: [docs/build/html/]
    expire_in: 1 day

# Generate combined test coverage report
coverage_report:
  stage: post_test
  before_script:
    - pip install coverage
  script:
    - coverage combine *.coverage
    - coverage report
    - coverage html
  coverage: '/TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+\%)/'
  artifacts:
    paths: [htmlcov/]
    expire_in: 1 week

# Update XRay links in JIRA. This is done only for the master
xray:
  stage: post_test
  only: [master]
  script:
    - 'curl -X POST -H "Content-Type: application/json"
         -H "Authorization: Basic $JIRA_AUTH"
         --data @cucumber.json
         https://jira.skatelescope.org/rest/raven/1.0/import/execution/cucumber'
  retry: 2 # In case JIRA doesn't work first time

# Build the skaorca/pytango_base image
build_pytango_base:
    stage: build_0
#    image: docker:stable
#    services:
#      - docker:dind
#    tags:
#      - shell
    before_script:
      - docker login -u $DOCKER_REGISTRY_USER_LOGIN -p $CI_REGISTRY_PASS_LOGIN $CI_REGISTRY
      - apk add make
    script:
      - cd docker/pytango_base
      - make DOCKER_BUILD_ARGS="--no-cache" build
#    only:
#      changes:
#        - docker/pytango_base

# Build the skaorca/pytango_ska_base image
#build_pytango_ska_base:
#    stage: build_1
#    image: docker:stable
#    services:
#      - docker:dind
#    before_script:
#      - docker login -u $DOCKER_REGISTRY_USER_LOGIN -p $CI_REGISTRY_PASS_LOGIN $CI_REGISTRY
#      - apk add make
#    script:
#      - cd docker/pytango_ska_base
#      - make DOCKER_BUILD_ARGS="--no-cache" build
#    only:
#      changes:
#        - docker/pytango_ska_base

# Build the skaorca/pytango_ska_dev image
#build_pytango_ska_dev:
#    stage: build_3
#    image: docker:stable
#    services:
#      - docker:dind
#    before_script:
#      - docker login -u $DOCKER_REGISTRY_USER_LOGIN -p $CI_REGISTRY_PASS_LOGIN $CI_REGISTRY
#      - apk add make
#    script:
#      - cd docker/pytango_ska_dev
#      - make DOCKER_BUILD_ARGS="--no-cache" build
#    only:
#      changes:
#        - docker/pytango_ska_dev

# Push images to image registry
push:
  stage: deploy
  script:
    - docker image ls
    - cd docker/pytango_base
    - make DOCKER_REGISTRY_HOST=$DOCKER_REGISTRY_HOST push
    - make push
  when: manual

# Generate gitlab pages. This is done only for the master.
pages:
  stage: deploy
  only: [master]
  script:
    - cp -R htmlcov public/
  artifacts:
    paths: [public/]
    expire_in: 1 week
