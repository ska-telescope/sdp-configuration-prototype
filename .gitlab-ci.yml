#
# Note: Tests can be run locally with
#   gitlab-runner exec <executor, eg. docker> <job name>
#

variables:
  GIT_STRATEGY: clone

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH

stages:
  - build
  - test
  - post_test
  - linting
  - build_docker
  - publish
  - pages

# ============================================================================
# Include common definitions and jobs for each component
# ============================================================================

include:
  - local: /scripts/.gitlab-ci-common.yml # Common definitions
  - local: /src/logging/.gitlab-ci.yml
  - local: /src/config_db/.gitlab-ci.yml
  - local: /src/lmc/.gitlab-ci.yml
  - local: /src/console/.gitlab-ci.yml
  - local: /src/processing_controller/.gitlab-ci.yml
  - local: /src/helm_deploy/.gitlab-ci.yml
  # - local: /src/vis_receive/.gitlab-ci.yml
  # - local: /src/workflows/test_new_receive/.gitlab-ci.yml

# ============================================================================
# Build documentation
# ============================================================================

build_docs:
  stage: test
  image: python:latest
  before_script:
    - pip install -r docs/requirements.txt
  script:
    - make -C docs html
  artifacts:
    paths: [docs/build/html/]
    expire_in: 1 day

# ============================================================================
# Generate test reports
# ============================================================================

# Generate combined coverage and unit test reports

coverage_report:
  stage: post_test
  image: python:latest
  before_script:
    - pip install anybadge coverage junitparser
  script:
    # Create directory for combined reports
    - mkdir -p build/reports
    - chmod 777 build/reports
    # Combine coverage reports
    - coverage --version
    - coverage combine *.coverage
    - coverage report
    - coverage html
    - coverage xml
    - mv coverage.xml build/reports/code-coverage.xml
    # Make coverage report badge
    - cov=$(grep -m 1 data-ratio htmlcov/index.html | cut -d">" -f2 | cut -d% -f1)
    - anybadge -l "coverage report" -v ${cov} -f cov_report.svg coverage
    # Merge unit test reports
    - junitparser merge unit-tests-*.xml build/reports/unit-tests.xml
  coverage: '/TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+\%)/'
  artifacts:
    paths:
    - build
    - htmlcov
    - cov_report.svg
    expire_in: 1 week


# Generate linting report

linting:
  stage: linting
  image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:latest
  before_script:
    - pip install pylint_junit pylint2junit
  script:
    - cd src
    - pylint -v --exit-zero --output-format=pylint2junit.JunitReporter
      config_db/ska_sdp_config
      helm_deploy
      logging/ska_sdp_logging
      processing_controller/processing_controller
      pss_receive/pss-receive
      pss_receive/pss-send
      lmc/ska_sdp_lmc
      > ../build/reports/linting.xml
  when: always
  artifacts:
    paths:
      - build
    expire_in: 1 week

# ============================================================================
# Publish reports
# ============================================================================

# Generate GitLab pages

pages:
  stage: pages
  image: python:latest
  dependencies: [coverage_report]
  script:
    # Publish the output of coverage_report
    - mv htmlcov public
    - mv cov_report.svg public
  artifacts:
    paths:
      - public
    expire_in: 1 week
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
      when: on_success

create_ci_metrics:
  stage: .post
  image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:latest
  when: always
  script:
    # Gitlab CI badges creation: START
    - apt-get -y update
    - apt-get install -y curl --no-install-recommends
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    # Gitlab CI badges creation: END
  artifacts:
    paths:
      - build
    expire_in: 1 week
