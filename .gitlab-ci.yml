#
# Note: Tests can be run locally with
#   gitlab-runner exec <executor, eg. docker> <job name>
#
stages:
  - test
  - post_test
  - docker_build_0
  - docker_build_1
  - docker_build_2
  - docker_build_3
  - docker_push
  - deploy

# ============================================================================
# Run linters & tests
# ============================================================================

.tango_tests:
  stage: test
  tags: [docker]
  image: skaorca/pytango_ska_dev:latest

# Test the SDPSubarray device
test_subarray_device:
  extends: .tango_tests
  script:
    - ./scripts/run_test.sh
        src/tango_sdp_subarray
        --gherkin-terminal-reporter
        -vv
        --cucumber-json=cucumber.json
    - mv .coverage $CI_JOB_NAME.coverage
  artifacts:
    paths:
    - cucumber.json
    - $CI_JOB_NAME.coverage
    expire_in: 1 week

# Test the SDPMaster device.
test_master_device:
  extends: .tango_tests
  script:
    - ./scripts/run_test.sh src/tango_sdp_master
    - mv .coverage $CI_JOB_NAME.coverage
  artifacts:
    paths:
      - $CI_JOB_NAME.coverage

# Test the configuration database
config_db_tests:
    stage: test
    image: skaorca/pytango_ska_dev:latest
    services:
      - name: quay.io/coreos/etcd:latest
        alias: etcd
        command:
          - /usr/local/bin/etcd
          - "--advertise-client-urls=http://0.0.0.0:2379"
          - "--listen-client-urls=http://0.0.0.0:2379"
          - "--initial-advertise-peer-urls=http://0.0.0.0:2380"
          - "--listen-peer-urls=http://0.0.0.0:2380"
          - "--initial-cluster=default=http://0.0.0.0:2380"
    variables:
      SDP_TEST_HOST: etcd
    script:
      - pipenv install etcd3-py
      - ./scripts/run_test.sh src/config_db
      - mv .coverage $CI_JOB_NAME.coverage
    artifacts:
      paths:
        - $CI_JOB_NAME.coverage

# Build documentation
build_docs:
  stage: test
  when: manual
  before_script:
    - pip install -r docs/requirements.txt
  script:
    - make -C docs html
  artifacts:
    paths: [docs/build/html/]
    expire_in: 1 day

# ============================================================================
# Generate test reports
# ============================================================================


# Generate combined test coverage report
coverage_report:
  stage: post_test
  tags: [docker]
  image: python:latest
  before_script:
    - pip install coverage
  script:
    - coverage combine *.coverage
    - coverage report
    - coverage html
  coverage: '/TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+(\d+\%)/'
  artifacts:
    paths: [htmlcov/]
    expire_in: 1 week

# Update XRay links in JIRA. This is done only for the master
xray_report:
  stage: post_test
  tags: [docker]
  image: python:latest
  only: [master]
  script:
    - 'curl -X POST -H "Content-Type: application/json"
         -H "Authorization: Basic $JIRA_AUTH"
         --data @cucumber.json
         https://jira.skatelescope.org/rest/raven/1.0/import/execution/cucumber'
  retry: 2 # In case JIRA doesn't work first time

# ============================================================================
# Build docker images
# Note: There are some optimisations to make to this section but that will
# also involve updating the Dockerfiles to be more friendly to caching
# https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/
# ============================================================================

# *** Common settings for building docker images
.build_docker:
  variables:
    DOCKER_REGISTRY_HOST: $NEXUS_HOST
    DOCKER_REGISTRY_USER: $CI_PROJECT_NAME
    GIT_VERSION: ${CI_COMMIT_SHA:0:8}
  tags:
    - docker
    - engageska
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - apk add make git
    - docker login -u $NEXUS_USER -p $NEXUS_PASS $NEXUS_HOST
  script:
    - echo $CI_PROJECT_NAME
    - echo $DOCKER_REGISTRY_HOST
    - echo $DOCKER_REGISTRY_USER
    - cd $BUILD_PATH
    - make DOCKER_REGISTRY_HOST=$NEXUS_HOST DOCKER_REGISTRY_USER=$CI_PROJECT_NAME pull
    - make DOCKER_REGISTRY_HOST=$NEXUS_HOST DOCKER_REGISTRY_USER=$CI_PROJECT_NAME build
    - make DOCKER_REGISTRY_HOST=$NEXUS_HOST DOCKER_REGISTRY_USER=$CI_PROJECT_NAME push
  retry: 2

# Build and push the `pytango_build` image.
build_pytango_build:
  extends: .build_docker
  stage: docker_build_0
  variables:
    BUILD_PATH: docker/pytango_build
#  only:
#    changes:
#      - $(BUILD_PATH)/*

# Build and push the `pytango_base` image.
build_pytango_base:
  extends: .build_docker
  stage: docker_build_1
  variables:
    BUILD_PATH: docker/pytango_base
#  only:
#    changes:
#      - docker/pytango_build/*
#      - $(BUILD_PATH)/*

# Build and push the `pytango_ska_base` image.
# Only build when there is a change.
build_pytango_ska_base:
  extends: .build_docker
  stage: docker_build_2
  variables:
    BUILD_PATH: docker/pytango_ska_base
#  only:
#    changes:
#      - docker/pytango_build/*
#      - docker/pytango_base/*
#      - $(BUILD_PATH)/*

# Build and push the `pytango_ska_dev` image.
# Only build when there is a change.
build_pytango_ska_dev:
  extends: .build_docker
  stage: docker_build_3
  variables:
    BUILD_PATH: docker/pytango_ska_dev
#  only:
#    changes:
#      - docker/pytango_build/*
#      - docker/pytango_base/*
#      - docker/pytango_ska_base/*
#      - $(BUILD_PATH)/*

# *** Common settings for building Tango docker images
.build_docker_tango_device:
  extends: .build_docker
#  only:
#    changes:
#      - docker/pytango_build/*
#      - docker/pytango_base/*
#      - docker/pytango_ska_base/*
#      - $(BUILD_PATH)/*

# Build and push `tangods_sdp_master` image.
build_tangods_sdp_master:
  extends: .build_docker_tango_device
  stage: docker_build_3
  variables:
    BUILD_PATH: src/tango_sdp_master

# Build and push `tangods_sdp_subarray` image.
build_tangods_sdp_subarray:
  extends: .build_docker_tango_device
  stage: docker_build_3
  variables:
    BUILD_PATH: src/tango_sdp_subarray

# ============================================================================
# Push versioned docker images (only from master)
# ============================================================================

.push_docker:
  stage: docker_push
  variables:
    DOCKER_REGISTRY_HOST: $NEXUS_HOST
    DOCKER_REGISTRY_USER: $CI_PROJECT_NAME
    GIT_VERSION: ${CI_COMMIT_SHA:0:8}
  tags:
    - docker
    - engageska
  image: docker:stable
#  only:
#    # Only the master should tag latest and version with no git sha
#    - master
  services:
    - docker:dind
  before_script:
    - apk add make git
    - docker login -u $NEXUS_USER -p $NEXUS_PASS $NEXUS_HOST
  script:
    - cd $BUILD_PATH
    - make DOCKER_REGISTRY_HOST=$NEXUS_HOST DOCKER_REGISTRY_USER=$CI_PROJECT_NAME pull
    - make DOCKER_REGISTRY_HOST=$NEXUS_HOST DOCKER_REGISTRY_USER=$CI_PROJECT_NAME push_latest
    - make DOCKER_REGISTRY_HOST=$NEXUS_HOST DOCKER_REGISTRY_USER=$CI_PROJECT_NAME push_version
  retry: 2

push_pytango_build:
  extends: .push_docker
  variables:
    BUILD_PATH: docker/pytango_build
  only:
    changes:
      - $(BUILD_PATH)/*

push_pytango_base:
  extends: .push_docker
  variables:
    BUILD_PATH: docker/pytango_base
  only:
    changes:
      - docker/pytango_build/*
      - $(BUILD_PATH)/*

push_pytango_ska_base:
  extends: .push_docker
  variables:
    BUILD_PATH: docker/pytango_ska_base
  only:
    changes:
      - docker/pytango_build/*
      - docker/pytango_base/*
      - $(BUILD_PATH)/*

push_pytango_ska_dev:
  extends: .push_docker
  variables:
    BUILD_PATH: docker/pytango_ska_dev
  only:
    changes:
      - docker/pytango_build/*
      - docker/pytango_base/*
      - docker/pytango_ska_base/*
      - $(BUILD_PATH)/*

push_tangods_sdp_master:
  extends: .push_docker
  variables:
    BUILD_PATH: src/tango_sdp_master
  only:
    changes:
      - docker/pytango_build/*
      - docker/pytango_base/*
      - docker/pytango_ska_base/*
      - $(BUILD_PATH)/*

push_tangods_sdp_subarray:
  extends: .push_docker
  variables:
    BUILD_PATH: src/tango_sdp_subarray
  only:
    changes:
      - docker/pytango_build/*
      - docker/pytango_base/*
      - docker/pytango_ska_base/*
      - $(BUILD_PATH)/*


# ============================================================================
# Publish reports
# ============================================================================

# Generate gitlab pages.
# https://gitlab.com/gitlab-org/gitlab-ce/issues/35141
pages:
  stage: deploy
  tags: [docker]
  image: python:latest
  script:
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_COMMIT_TAG
    - echo $CI_PROJECT_NAME
    - cp -R htmlcov public/
    - if [[ "$CI_COMMIT_REF_NAME" = "master" && "$CI_COMMIT_TAG" = "" ]]; then
        echo "This is master branch";
        cp -R htmlcov public/
      else
        echo "This is a development branch";
        cp -R htmlcov public/$(CI_COMMIT_REF_NAME)/
      fi;
  cache:
    paths: [public/]
  artifacts:
    paths: [public/]
